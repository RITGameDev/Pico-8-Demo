pico-8 cartridge // http://www.pico-8.com
version 27
__lua__
--rgdc demo

--code heavily references
--tutorial from ⬇️⬇️⬇️
--https://nerdyteachers.com/explain/platformer/

--variables--------------------

function _init()
--this is a table
--it's kind of like a class!
--player holds an array (table)
--of variables relevant
--to itself
  player={
    sp=1, //start sprite
    x=16, //position
    y=48,
    w=8,   //sprite size
    h=8,
    flp=false, //flip
    dx=0,
    dy=0,
    max_dx=2,
    max_dy=3,
    acc=0.5,
    boost=3,
    anim=0,
    running=false,
    jumping=false,
    falling=false,
    sliding=false,
    landed=false
  }

  gravity=0.3
  friction=0.85

  --simple camera
  cam_x=0

  --map limits
  map_start=0
  map_end=1024
end

-->8
--update and draw--------------

function _update()
	--	print(falling)
  player_update()
  player_animate()

		spring()

  --simple camera
  cam_x=player.x-64+(player.w/2)
  if cam_x<map_start then
     cam_x=map_start
  end
  if cam_x>map_end-128 then
     cam_x=map_end-128
  end
  camera(cam_x,0)
end

function _draw()
  cls(7) --clears screen
  map(0,0) --redraws map
  --draws sprite
  spr(player.sp,player.x,
  player.y,1,1,player.flp)
end
-->8
--collisions-------------------

function collide_map(obj,aim,
flag)
 --obj = table needs x,y,w,h
 --aim = left,right,up,down

 local x=obj.x  local y=obj.y
 local w=obj.w  local h=obj.h

 local x1=0	 local y1=0
 local x2=0  local y2=0

 if aim=="left" then
   x1=x-1  y1=y
   x2=x    y2=y+h-1

 elseif aim=="right" then
   x1=x+w-1    y1=y
   x2=x+w  y2=y+h-1

 elseif aim=="up" then
   x1=x+2    y1=y-1
   x2=x+w-3  y2=y

 elseif aim=="down" then
   x1=x+2      y1=y+h
   x2=x+w-3    y2=y+h
 end

 --pixels to tiles
 x1/=8    y1/=8
 x2/=8    y2/=8

 if fget(mget(x1,y1), flag)
 or fget(mget(x1,y2), flag)
 or fget(mget(x2,y1), flag)
 or fget(mget(x2,y2), flag) then
   return true
 else
   return false
 end

end
-->8
--player----------------------
	
function player_update()
  --physics
  player.dy+=gravity
  player.dx*=friction

  --controls
  if btn(⬅️) then
    player.dx-=player.acc
    player.running=true
    player.flp=true
  end
  if btn(➡️) then
    player.dx+=player.acc
    player.running=true
    player.flp=false
  end

  --slide
  if player.running
  and not btn(⬅️)
  and not btn(➡️)
  and not player.falling
  and not player.jumping then
    player.running=false
    player.sliding=true
  end

  --jump
  if btnp(❎)
  and player.landed then
    player.dy-=player.boost
    player.landed=false
  end

  --check collision up and down
  if player.dy>0 then
    player.falling=true
    player.landed=false
    player.jumping=false

    player.dy=limit_speed(player.dy,player.max_dy)

    if collide_map(player,"down",0) then
      player.landed=true
      player.falling=false
      player.dy=0
      player.y-=((player.y+player.h+1)%8)-1
    end
  elseif player.dy<0 then
    player.jumping=true
    if collide_map(player,"up",1) then
      player.dy=0
    end
  end

  --check collision left and right
  if player.dx<0 then

    player.dx=limit_speed(player.dx,player.max_dx)

    if collide_map(player,"left",0) then
      player.dx=0
    end
  elseif player.dx>0 then

    player.dx=limit_speed(player.dx,player.max_dx)

    if collide_map(player,"right",0) then
      player.dx=0
    end
  end

  --stop sliding
  if player.sliding then
    if abs(player.dx)<.2
    or player.running then
      player.dx=0
      player.sliding=false
    end
  end

  player.x+=player.dx
  player.y+=player.dy

  --limit player to map
  if player.x<map_start then
    player.x=map_start
  end
  if player.x>map_end-player.w then
    player.x=map_end-player.w
  end
end

function player_animate()
  if player.jumping then
    player.sp=2
  elseif player.falling then
    player.sp=4
--  elseif player.sliding then
--    player.sp=9
  elseif player.running then
    if time()-player.anim>.1 then
      player.anim=time()
      player.sp+=1
      if player.sp>4 then
        player.sp=1
      end
    end
  else --player idle
        player.sp=1
  end
end

function limit_speed(num,maximum)
  return mid(-maximum,num,maximum)
end


-->8
--we springing

function spring()

	--foreach(s in springs)
		if collide_map(player,"down",2) then
    player.dy-=player.boost+1
    player.landed=false
    
    end
		--end	
end
__gfx__
0000000000000000004444400000000000444440b0bb0bbb000000000b0000000000000000000000000000000000000000000000000000000000000000000000
00000000004444400444ff40004444400444ff40b00b000b00000000b0b000000000000000000000000000000000000000000000000000000000000000000000
007007000444ff40044cffc00444ff40044cffc0b0b000b000000000b0b000000000000000000000000000000000000000000000000000000000000000000000
00077000044cffc004efffe0044cffc004efffe0b0bb00b0000000000b0000000000000000000000000000000000000000000000000000000000000000000000
0007700004efffe00444244004efffe0044424400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700044424400022210004442440002120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000002220000010000000222000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001010000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bbbbbbbb8888888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bbbbbbbb8888888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bbbbbbbb000dd00088888888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bfbbfbbb00dddd0088888888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bfffffbf0550055000dddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ff4fffff0550055055000055000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000f4ffffff00dddd000dd00dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ffffff4fffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000004ffff4ff0000001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000004fffffff0000001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ff4fffff0000006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ff4fff4f0000004666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000f4fff4ff0000004444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000fffffff40000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000f4fffff40000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ff4fffff0000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000bb0000111111110000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000bb0000111cc7110000000660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000bb0000111c78110000000440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000bb0000111788110000001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000bb0000111111110000001c71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000bb0000444444440000001781000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000bb0000444444440000001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000bb0000044554400000004554000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000010501000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000031111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000031212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000031212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000a000011000031212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111111111211212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000002300024000110001700013000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000017000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
